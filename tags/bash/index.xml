<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on 不争笔记</title>
    <link>/tags/bash/</link>
    <description>Recent content in bash on 不争笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 22 Oct 2019 12:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 bash 脚本中使用注释</title>
      <link>/linux/bash-comments/</link>
      <pubDate>Tue, 22 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/bash-comments/</guid>
      <description>&lt;p&gt;在编写 Bash 脚本时，始终使代码干净且易于理解是一个好习惯。以块形式组织代码，缩进，为变量和函数提供描述性名称是实现此目的的几种方法。&lt;/p&gt;
&lt;p&gt;提高代码可读性的另一种方法是使用注释。注释是在 shell 脚本中编写的易于理解的解释或说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux中的 pushd 和 popd 命令</title>
      <link>/linux/popd-and-pushd-commands-in-linux/</link>
      <pubDate>Wed, 16 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/popd-and-pushd-commands-in-linux/</guid>
      <description>&lt;p&gt;&lt;code&gt;pushd&lt;/code&gt; 并且 &lt;code&gt;popd&lt;/code&gt; 是允许您使用目录栈工作，改变 Linux 和其他类 Unix 操作系统的当前工作目录的命令。尽管 &lt;code&gt;pushd&lt;/code&gt; 并且 &lt;code&gt;popd&lt;/code&gt; 是非常强大和有用的命令，但它们却被低估并且很少使用。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将向您展示如何使用 &lt;code&gt;pushd&lt;/code&gt; 和 &lt;code&gt;popd&lt;/code&gt; 命令浏览系统的目录树。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Bash 中对变量递增或者递减</title>
      <link>/linux/bash-increment-decrement-variable/</link>
      <pubDate>Mon, 12 Aug 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/bash-increment-decrement-variable/</guid>
      <description>&lt;p&gt;编写 Bash 脚本时最常见的算术运算之一是递增和递减变量。这通常在循环中用作计数器，但它也可以在脚本的其他地方出现。&lt;/p&gt;
&lt;p&gt;递增和递减意味着分别从数值变量的值中添加或减去值(通常为 &lt;code&gt;1&lt;/code&gt; )。可以使用双括号 &lt;code&gt;((...))&lt;/code&gt; 和 &lt;code&gt;$((...))&lt;/code&gt; 或使用内置的 &lt;code&gt;let&lt;/code&gt; 命令执行算术扩展。&lt;/p&gt;
&lt;p&gt;在 Bash 中，有多种方法可以加/减变量。本文解释了其中的一些内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Shebang</title>
      <link>/linux/bash-shebang/</link>
      <pubDate>Wed, 24 Jul 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/bash-shebang/</guid>
      <description>&lt;p&gt;如果您通过阅读其他人的代码来学习 Bash 脚本，您可能已经注意到脚本中的第一行以 &lt;code&gt;#!&lt;/code&gt; 字符和 Bash 解释器的路径开头。&lt;/p&gt;
&lt;p&gt;这个字符序列 (&lt;code&gt;#!&lt;/code&gt;) 称为 &lt;strong&gt;shebang&lt;/strong&gt;，用于告诉操作系统使用哪个解释器来解析文件的其余部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Bash 中如何检查字符串是否包含的子串</title>
      <link>/linux/how-to-check-if-string-contains-substring-in-bash/</link>
      <pubDate>Sun, 21 Jul 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-check-if-string-contains-substring-in-bash/</guid>
      <description>&lt;p&gt;在 Bash 中使用字符串时最常见的操作之一是确定字符串是否包含另一个字符串。&lt;/p&gt;
&lt;p&gt;在本文中，我们将向您展示检查字符串是否包含子字符串的几种方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash 中的 For 循环</title>
      <link>/linux/bash-for-loop/</link>
      <pubDate>Sat, 20 Jul 2019 08:00:00 +0800</pubDate>
      
      <guid>/linux/bash-for-loop/</guid>
      <description>&lt;p&gt;循环是编程语言的基本概念之一。当你想要一遍又一遍地运行一系列命令直到达到某个条件后终止退出时，循环很方便。&lt;/p&gt;
&lt;p&gt;在诸如 Bash 之类的脚本语言中，循环对于自动执行重复性任务非常有用。&lt;/p&gt;
&lt;p&gt;在 Bash 脚本中有3个基本的循环结构，for 循环， &lt;a href=&#34;/linux/bash-while-loop/&#34;&gt;while 循环&lt;/a&gt;，&lt;a href=&#34;/linux/bash-until-loop/&#34;&gt;until 循环&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将介绍 Bash 中 for 循环的基础知识以及用于改变循环流的 break 和 continue 语句。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Source 命令</title>
      <link>/linux/bash-source-command/</link>
      <pubDate>Tue, 18 Jun 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/bash-source-command/</guid>
      <description>&lt;p&gt;&lt;code&gt;source&lt;/code&gt; 命令从当前 shell 环境中指定为其参数的文件中读取和执行命令。将函数，变量和配置文件加载到 shell 脚本中非常有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt; 命令已经内置在 Bash shell 中和 Linux 和 UNIX 操作系统中使用的其他流行的 shell 中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash if..else 语句</title>
      <link>/linux/bash-if-else-statement/</link>
      <pubDate>Wed, 29 May 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/bash-if-else-statement/</guid>
      <description>&lt;p&gt;判断是计算机编程最基本的概念之一。就像任何其他的编程语言中的 &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;if..else&lt;/code&gt; ， &lt;code&gt;if..elif..else&lt;/code&gt; 一样， &lt;code&gt;if&lt;/code&gt; 在 Bash 的语句可以用来基于特定条件来执行代码。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将向您介绍 Bash if 语句的基础知识，并向您展示如何在 shell 脚本中使用它们。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash 数组</title>
      <link>/linux/bash-arrays/</link>
      <pubDate>Tue, 28 May 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/bash-arrays/</guid>
      <description>&lt;p&gt;数组是最常用和最基本的数据结构之一。您可以认为数组是一个可以在其中存储多个变量的变量。&lt;/p&gt;
&lt;p&gt;在本文中，我们将讨论 Bash 数组，并列举了几个在 Bash 脚本中使用它们的示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Heredoc</title>
      <link>/linux/bash-heredoc/</link>
      <pubDate>Tue, 28 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/bash-heredoc/</guid>
      <description>&lt;p&gt;编写 shell 脚本时，您可能需要将多行文本或代码块传递给交互式命令，例如 &lt;a href=&#34;/linux/linux-tee-command/&#34;&gt;tee&lt;/a&gt; ， cat 或 &lt;a href=&#34;/linux/how-to-use-linux-sftp-command-to-transfer-files/&#34;&gt;sftp&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;在 Bash 和其他类似 Zsh 的 shell 中， Here Document（Heredoc）是一种重定向，允许您将多行输入传递给命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Linux 中创建文件</title>
      <link>/linux/create-a-file-in-linux/</link>
      <pubDate>Tue, 28 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/create-a-file-in-linux/</guid>
      <description>&lt;p&gt;在 Linux 中，我们可以从命令行或桌面文件管理器创建新文件。&lt;/p&gt;
&lt;p&gt;了解如何创建新文件对于定期使用 Linux 的任何人来说都是一项重要技能。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将向您展示使用命令行在 Linux 中快速创建新文件的各种方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash while Loop</title>
      <link>/linux/bash-while-loop/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/bash-while-loop/</guid>
      <description>&lt;p&gt;循环是编程语言的基本概念之一。当您想要多次运行一系列命令直到满足特定条件时，循环很方便。&lt;/p&gt;
&lt;p&gt;在诸如Bash之类的脚本语言中，循环对于自动执行重复性任务非常有用。在Bash脚本中有3个基本的循环结构，&lt;a href=&#34;/linux/bash-for-loop/&#34;&gt;用于循环&lt;/a&gt;，while循环，&lt;a href=&#34;/linux/bash-until-loop/&#34;&gt;直到循环&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本教程解释了Bash中while循环的基础知识，以及用于改变循环流的break和continue语句。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash函数</title>
      <link>/linux/bash-functions/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/bash-functions/</guid>
      <description>&lt;p&gt;Bash函数本质上是一组可以多次调用的命令。函数的目的是帮助您使bash脚本更具可读性，并避免一遍又一遍地编写相同的代码。&lt;/p&gt;
&lt;p&gt;与大多数编程语言相比，Bash函数相当有限。在本教程中，我们将介绍Bash函数的基础知识，并向您展示如何在shell脚本中使用它们。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何创建Bash别名</title>
      <link>/linux/how-to-create-bash-aliases/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-create-bash-aliases/</guid>
      <description>&lt;p&gt;您是否经常发现自己在命令行上键入一个长命令或在bash历史记录中搜索以前键入的命令？如果您对这些问题的答案都是肯定的，那么您会发现bash别名很方便。Bash别名允许您为较长的命令设置可记忆的快捷命令。&lt;/p&gt;
&lt;p&gt;Bash别名本质上是一个快捷方式，可以使您不必记住长命令，并在使用命令行时消除大量的输入。例如，您可以将别名设置&lt;code&gt;tgz&lt;/code&gt;为&lt;code&gt;tar -xvfz&lt;/code&gt;命令的快捷方式。&lt;/p&gt;
&lt;p&gt;本文介绍如何创建bash别名，以便在命令行上提高工作效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Bash 中比较字符串</title>
      <link>/linux/how-to-compare-strings-in-bash/</link>
      <pubDate>Mon, 06 May 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-compare-strings-in-bash/</guid>
      <description>&lt;p&gt;在编写 Bash 脚本时，您通常需要比较两个字符串以检查它们是否相等。当两个字符串具有相同的长度并且包含相同的字符序列时，它们是相等的。&lt;/p&gt;
&lt;p&gt;本教程描述了如何比较 Bash 中的字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Linux 中复制文件和目录</title>
      <link>/linux/how-to-copy-files-and-directories-in-linux/</link>
      <pubDate>Mon, 06 May 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-copy-files-and-directories-in-linux/</guid>
      <description>&lt;p&gt;复制文件和目录是命令行上最常用的操作之一。在 Linux 中，有几个用于复制文件的命令，其中 cp 和 rsync 是最受欢迎的。&lt;/p&gt;
&lt;p&gt;复制文件时使用 cp 命令和复制目录时使用 rsync 命令是一种常见做法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux cd 命令</title>
      <link>/linux/linux-cd-command/</link>
      <pubDate>Fri, 26 Apr 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/linux-cd-command/</guid>
      <description>&lt;p&gt;在 Linux 的命令行上工作时， cd 命令是最基本和最常用的命令之一。 cd 命令代表“更改目录”，用于更改 Linux 和其他类 Unix 操作系统中的当前工作目录。当前工作目录是用户当前工作的目录。每次与命令提示符交互时，您都在目录中工作。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将向您展示如何使用 cd 命令导航计算机的目录树。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>创建自签名的 SSL 证书</title>
      <link>/linux/creating-a-self-signed-ssl-certificate/</link>
      <pubDate>Fri, 19 Apr 2019 08:00:00 +0800</pubDate>
      
      <guid>/linux/creating-a-self-signed-ssl-certificate/</guid>
      <description>&lt;p&gt;本文介绍如何使用 openssl 工具创建自签名的 SSL 证书。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 中的 Echo 命令用法与示例</title>
      <link>/linux/echo-command-in-linux-with-examples/</link>
      <pubDate>Thu, 18 Apr 2019 07:00:00 +0800</pubDate>
      
      <guid>/linux/echo-command-in-linux-with-examples/</guid>
      <description>&lt;p&gt;echo 命令是 Linux 中最基本和最常用的命令之一。它接收字符串参数，并把他们传递给标准输出并在标准输出上打印出来。&lt;/p&gt;
&lt;p&gt;echo 通常用于 shell 脚本中以显示消息或输出其他命令的结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 pwd 命令在 Linux 中确定当前的工作目录</title>
      <link>/linux/current-working-directory/</link>
      <pubDate>Wed, 17 Apr 2019 07:00:00 +0800</pubDate>
      
      <guid>/linux/current-working-directory/</guid>
      <description>&lt;p&gt;在本教程中，我们将向您展示如何使用 pwd 命令确定当前的工作目录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Bash 中拼接字符串</title>
      <link>/linux/bash-concatenate-strings/</link>
      <pubDate>Sun, 24 Mar 2019 08:00:00 +0800</pubDate>
      
      <guid>/linux/bash-concatenate-strings/</guid>
      <description>&lt;p&gt;字符串拼接最常用的字符串操作之一。字符串拼接只是一个特殊的的编程方法，用于通过将一个字符串附加到另一个字符串的末尾来将字符串拼接在一起。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将解释如何在 Bash 中拼接字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash 中如何检查文件或目录是否存在</title>
      <link>/linux/bash-check-if-file-exists/</link>
      <pubDate>Wed, 13 Mar 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/bash-check-if-file-exists/</guid>
      <description>&lt;p&gt;当您在编写 Shell 脚本时，您很多时候可能会发现自己需要根据文件是否存在来执行某些操作。&lt;/p&gt;
&lt;p&gt;在 Bash 中，您可以使用 &lt;code&gt;test&lt;/code&gt; 命令检查文件是否存在并确定文件的类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test&lt;/code&gt; 命令采用以下语法形式之一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; EXPRESSION
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; EXPRESSION &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; EXPRESSION &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您希望脚本可移植，则应该使用 &lt;code&gt;test&lt;/code&gt; 命令的旧语法形式 &lt;code&gt;[&lt;/code&gt;，因为这种形式在所有 POSIX shell 上都可用的。&lt;code&gt;test&lt;/code&gt; 命令的新语法版本 &lt;code&gt;[[&lt;/code&gt; (双括号) 被大多数使用 Bash ， Zsh 和 Ksh 作为默认 shell 的现代系统支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash 中 until loop 用法</title>
      <link>/linux/bash-until-loop/</link>
      <pubDate>Mon, 04 Mar 2019 08:00:00 +0800</pubDate>
      
      <guid>/linux/bash-until-loop/</guid>
      <description>&lt;p&gt;循环是编程语言的基本概念之一。当您想要反复运行一系列命令直到满足特定条件时，循环很方便。&lt;/p&gt;
&lt;p&gt;在诸如 Bash 之类的脚本语言中，循环对于自动执行重复性任务非常有用。在 Bash 脚本中有3个基本的循环结构，用于 for loop, while loop 和 until loop 。&lt;/p&gt;
&lt;p&gt;本教程解释了 Bash 中的 until loop 的基础知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash 中 Case 语句用法</title>
      <link>/linux/bash-case-statement/</link>
      <pubDate>Sat, 02 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>/linux/bash-case-statement/</guid>
      <description>&lt;p&gt;在 Bash 中，当您有多个不同的选择时， case 语句通常用于简化复杂的条件。 使用 case 语句而不是嵌套的 if 语句将帮助您使 bash 脚本更易读，更易于维护。&lt;/p&gt;
&lt;p&gt;Bash 中的 case 语句与 Javascript 或 C 中的 switch 语句具有类似的概念。与 C 中的 switch 语句不同主要在于， Bash 中的 case 语句一旦找到一个并执行与该模式关联的语句，就不会继续搜索模式匹配。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将介绍 Bash 案例语句的基础知识，并向您展示如何在 shell 脚本中使用它们。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Shell 的常用快捷键</title>
      <link>/post/20170805-bash-shell-shortcut-keys/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/20170805-bash-shell-shortcut-keys/</guid>
      <description>&lt;p&gt;对于 Bash 的快捷键一直了解很少，除了常用的 &lt;code&gt;CTRL + a&lt;/code&gt;, &lt;code&gt;CTRL + e&lt;/code&gt; 和 &lt;code&gt;CTRL + l&lt;/code&gt;，其他的基本上都未使用过，这里记录一下（Mac 下请使用 ESC 代替 ALT）。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>