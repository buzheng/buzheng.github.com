<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 不争笔记</title>
    <link>/tags/git/</link>
    <description>Recent content in git on 不争笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 26 Apr 2019 06:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装和配置 Gogs</title>
      <link>/linux/how-to-install-and-configure-gogs-on-ubuntu-18-04/</link>
      <pubDate>Fri, 26 Apr 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-and-configure-gogs-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;Gogs 是一个用 Go 编写的自托管开源 git 服务器。它包括存储库文件编辑器，项目问题跟踪，并且内置维基。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; 是一个轻量级应用程序，内存占用空间更小，可以安装在低功耗系统上。如果您正在寻找 Gitlab 的替代品，而且您不需要 &lt;a href=&#34;/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/&#34;&gt;Gitlab&lt;/a&gt; 提供的所有功能，那么您一定要尝试 Gogs 。&lt;/p&gt;

&lt;p&gt;本教程介绍了在 Ubuntu 18.04 上安装和配置 Gogs 的步骤。相同的说明适用于 Ubuntu 16.04 和任何其他基于 Ubuntu 的发行版。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Debian 9 上安装Git</title>
      <link>/linux/how-to-install-git-on-debian-9/</link>
      <pubDate>Tue, 23 Apr 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-debian-9/</guid>
      <description>&lt;p&gt;本教程将向您展示如何在 Debian 9 上安装和配置 Git 。&lt;/p&gt;

&lt;p&gt;Git 是许多开源和商业项目使用的世界上最流行的分布式版本控制系统。它允许您跟踪代码更改，恢复到以前的阶段，创建分支以及与您的开发人员协作。&lt;/p&gt;

&lt;p&gt;Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;本教程在 Debian 9 上进行了测试，但它也适用于任何以前的 Debian 版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 CentOS 7 上安装 Git</title>
      <link>/linux/how-to-install-git-on-centos-7/</link>
      <pubDate>Fri, 05 Apr 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-centos-7/</guid>
      <description>&lt;p&gt;本教程将引导您在 CentOS 7 安装 Git 并完成基本的配置。&lt;/p&gt;

&lt;p&gt;Git 是最受欢迎的版本控制系统，已被数十万个项目使用。 Git 允许您跟踪代码更改，恢复到以前的阶段，在多个分支上同时工作并与您的开发人员协作。 Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;在撰写本文时，默认的 CentOS 7 存储库中可用的 Git 版本 &lt;code&gt;1.8.3&lt;/code&gt; 已经过时了。&lt;/p&gt;

&lt;p&gt;安装最新版 Git (&lt;code&gt;v2.18&lt;/code&gt;) 的最简单方法是使用 &lt;a href=&#34;http://opensource.wandisco.com/&#34;&gt;Wandisco&lt;/a&gt; 存储库中的 yum 软件包管理工具进行安装。&lt;/p&gt;

&lt;p&gt;另一种选择是从源代码编译 Git ，这将允许您安装最新的 Git 版本并自定义构建选项，但您将无法通过 &lt;code&gt;yum&lt;/code&gt; 包管理器维护 Git 安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装 Git</title>
      <link>/linux/how-to-install-git-on-ubuntu-18-04/</link>
      <pubDate>Sat, 30 Mar 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;Git 是分布式版本控制系统的事实标准，现在被大多数开发人员使用。它允许您跟踪代码更改，恢复到以前的阶段，创建分支以及与您的开发人员协作。&lt;/p&gt;

&lt;p&gt;Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;本教程将指导您完成在 Ubuntu 18.04 上安装 Git 所需的步骤。相同的说明适用于 Ubuntu 16.04 和任何其他基于 Ubuntu 的发行版，包括 Kubuntu ， Linux Mint 和 Elementary OS 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装和配置 GitLab</title>
      <link>/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/</link>
      <pubDate>Tue, 19 Mar 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;GitLab 是一个基于 Web 的开源 &lt;!--link:how-to-install-git-on-ubuntu-18-04--&gt;Git&lt;!--link--&gt; 软件仓库管理器，用 &lt;!--link:how-to-install-ruby-on-ubuntu-18-04--&gt;Ruby&lt;!--link--&gt; 编写，包括 wiki，问题管理，代码审查，监控以及持续集成和部署。它使开发人员能够创建，审查和部署他们的项目。&lt;/p&gt;

&lt;p&gt;有三种不同版本的 GitLab 可用，社区版 (CE) ，企业版 (EE) 和 GitLab 托管版本。&lt;/p&gt;

&lt;p&gt;如果你想远离 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; ， &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; 是首选。它可以从不同的来源导入项目和问题，包括 GitHub ，这使得迁移过程无忧无虑。 GitLab 界面设计精良，干净，直观，并且在用户体验和功能方面与 GitHub 相近。&lt;/p&gt;

&lt;p&gt;根据所需的用例，有几种方法可以安装 GitLab 。本教程介绍了使用 Omnibus 软件包在 Ubuntu 18.04 系统上安装和配置 GitLab  (CE) 所需的步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用github作为maven仓库</title>
      <link>/post/github-maven-repository/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/github-maven-repository/</guid>
      <description>&lt;p&gt;本文介绍的这种使用 github 作为 maven 仓库的思路主要为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github的项目上创建mvn-repo分支，使用mvn-repo分支作为maven仓库&lt;/li&gt;
&lt;li&gt;配 置 pom.xml 使用 target/mvn-repo 作为本地部署的临时maven仓库&lt;/li&gt;
&lt;li&gt;部署时使用 github site-maven-plugin 将本地的maven仓库 push 到 github 的项目的分支 mvn-repo 上去&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Git对于SVN的优势</title>
      <link>/post/advantage-of-git-to-svn/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/advantage-of-git-to-svn/</guid>
      <description>Git是一个相当出色的版本控制工具，相对于SVN，Git有很多优势。
1、Git是分布式的 Git是分布式的，没有客户端/服务端的概念，每个仓库既是客户端，可以是服务端，每一份都是对git仓库的一个完整拷贝。而SVN是C/S模式的，有一个中央服务器。分布式的好处是显而易见的，只要世界上还有一台机器上有一个Git拷贝，你的代码就不会丢失。而SVN若是服务器坏掉了，我只有哭的份。
2、Git很少需要联网 由于Git是分布式的，每一份都是对Git仓库的一个完整拷贝，所以大多数情况下，你只需要在本地完成开发，包括：创建分支、合并分支、删除分支等等。只有极少的操作才会用到联网：fetch, push, pull等。而SVN则不同，他可能需要你经常连线服务器。
3、Git占用的空间相当少 Git占用的空间相当少，并且不会每个目录里都产生配置文件，他的配置文件只会在根目录有。SVN的痛苦都体验过吧，部署的时候，是不是每次都要删除所有的 .svn目录，并且配置文件当地多，占用了很多你的地盘？？
4、Git分支相当容易操作 由于git是在本地，你很容易创建分支和合并分支。当你有修改的需求的时候，一般会创建一个分支，在分支上进行修改，然后将分支合并到master分支上；即使后来需求有变，不需要修改了，而你只需要删除分支即可。
5、Git相当容易学习 Git的常用的命令20多个，学习起来相当容易。就拿初始化Git仓库来说，只需要git init一行命令。点击此处查看git常用命令。
本文只是一家之言，Git和SVN都是不错的工具，都尝试一下，可以体会一下不同门派的思想。</description>
    </item>
    
    <item>
      <title>Git 使用汇总</title>
      <link>/post/git-usage-notes/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/git-usage-notes/</guid>
      <description>git 基本操作命令 git init 用于初始化一个git仓库 git config user.name &amp;ldquo;buzheng&amp;rdquo; 配置用户名 git config user.email &amp;ldquo;zany@buzheng.org&amp;rdquo; git remote add origin git@xxxx.com:xxxxx_project/xxxx.git 添加远程服务端源 git fetch 获取代码 git pull 获取代码，并进行了merge操作 git add -A 添加所有修改的文件到 index git commit -a -m &amp;ldquo;message&amp;rdquo; 提交到本地仓库 git push 提交到远程服务器 git log 查看提交记录，好像有参数 -p git status 查看当前工作目录的状态，是否有变更等 git diff 查看工作目录与index的不同 git diff –cached 查看index与commit的不同
git branch 查看所有分支，以及当前所处的分支 git branch name 创建分支name git checkout name 切换到分支name git branch -d name 删除分支，安全删除，如果分支没有被提交或者合并，是不能删除的 git branch -D name 删除分支，强制删除 git merge name 合并分支</description>
    </item>
    
  </channel>
</rss>