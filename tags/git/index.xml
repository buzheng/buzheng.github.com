<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 不争笔记</title>
    <link>/tags/git/</link>
    <description>Recent content in git on 不争笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 22 Oct 2019 13:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何更改 git 的提交消息</title>
      <link>/linux/change-git-commit-message/</link>
      <pubDate>Tue, 22 Oct 2019 13:00:00 +0800</pubDate>
      
      <guid>/linux/change-git-commit-message/</guid>
      <description>&lt;p&gt;使用 Git 时，可能会遇到需要编辑提交消息的情况。做出更改的原因有很多，例如，修正了错字，删除了敏感信息或添加了其他信息。&lt;/p&gt;

&lt;p&gt;本指南说明了如何更改最新或较旧的 Git 提交的消息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何设置 git 服务器</title>
      <link>/linux/how-to-setup-a-git-server/</link>
      <pubDate>Tue, 22 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-setup-a-git-server/</guid>
      <description>&lt;p&gt;当涉及到 Git 托管时，您可以有许多选择， GitHub ， Gitlab 和 Bitbucket 是受欢迎的解决方案，但是运行自己的 Git 服务器也是值得考虑的替代方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Git 中删除未被跟踪的文件</title>
      <link>/linux/how-to-remove-untracked-files-in-git/</link>
      <pubDate>Mon, 19 Aug 2019 12:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-remove-untracked-files-in-git/</guid>
      <description>&lt;p&gt;Git 工作目录中的文件可以被跟踪或不被跟踪。&lt;/p&gt;

&lt;p&gt;被跟踪的文件是已添加并提交并且 git 管理的文件。被跟踪的文件可以不进行修改，也可以修改或还可以暂存。除了被跟踪的文件，工作目录中的所有其他文件都是未被跟踪的， git 不知道这些文件。&lt;/p&gt;

&lt;p&gt;有时你的 git 工作目录可能会有不必要的文件，这些文件要么是自动生成的，要么是从合并中删除，要么是由于错误创建的。在这些情况下，您可以在其中添加 &lt;code&gt;.gitignore&lt;/code&gt; 或删除这些文件。如果你想让你的存储库保持良好和清洁，更好的选择是删除不必要的文件。&lt;/p&gt;

&lt;p&gt;本文介绍如何在 Git 中删除未被跟踪的文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Debian 10 Linux 上安装 Git</title>
      <link>/linux/how-to-install-git-on-debian-10/</link>
      <pubDate>Sat, 03 Aug 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-debian-10/</guid>
      <description>&lt;p&gt;Git 是许多开源和商业项目使用的世界上最流行的分布式版本控制系统。&lt;/p&gt;

&lt;p&gt;使用 Git ，您可以与其他开发人员合作开展项目，跟踪代码更改，恢复到以前的阶段，创建分支机构等等。它最初由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发。&lt;/p&gt;

&lt;p&gt;本教程将介绍如何在 Debian 10 Buster 上安装和配置 Git 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Git 中创建和列出本地和远程分支</title>
      <link>/linux/how-to-create-and-list-git-branches/</link>
      <pubDate>Tue, 23 Jul 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-create-and-list-git-branches/</guid>
      <description>&lt;p&gt;分支是软件开发过程的一部分，也是 Git 中最强大的功能之一。分支实际上是指向某个提交的指针。&lt;/p&gt;

&lt;p&gt;在修复错误或处理新功能时，开发人员正一般会创建一个新分支，以后可以将其合并到主代码库中。&lt;/p&gt;

&lt;p&gt;本文介绍如何创建和列出本地和远程 Git 分支。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何添加 Git 远程源</title>
      <link>/linux/how-to-add-git-remotes/</link>
      <pubDate>Fri, 07 Jun 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-add-git-remotes/</guid>
      <description>&lt;p&gt;在使用 Git 工作时，通常您只使用一个名称为 origin 的远程源和不同的分支来实现不同的功能和环境。 当您克隆远程存储库时，origin 自动创建并指向克隆存储库。&lt;/p&gt;

&lt;p&gt;但是，当与一组人合作开发一个项目时，您可能会发现使用多个 Git 远程源非常方便。&lt;/p&gt;

&lt;p&gt;Git Remote 是指向通常存储在其他服务器上的存储库版本的指针。本指南介绍了如何添加新的 Git Remote 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何删除本地和远程Git分支</title>
      <link>/linux/how-to-delete-local-and-remote-git-branch/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-delete-local-and-remote-git-branch/</guid>
      <description>&lt;p&gt;分支是日常开发过程的一部分，也是Git中最强大的功能之一。一旦分支合并，除了历史研究之外，它没有任何意义。成功合并后删除分支是常见的建议做法。&lt;/p&gt;

&lt;p&gt;本指南介绍了如何删除本地和远程Git分支。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在CentOS 7上安装和配置GitLab</title>
      <link>/linux/how-to-install-and-configure-gitlab-on-centos-7/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-and-configure-gitlab-on-centos-7/</guid>
      <description>&lt;p&gt;GitLab是一个基于Web的开源&lt;a href=&#34;/linux/how-to-install-git-on-centos-7/&#34;&gt;Git&lt;/a&gt;存储库管理器，用&lt;a href=&#34;/linux/how-to-install-ruby-on-centos-7/&#34;&gt;Ruby&lt;/a&gt;编写，包括维基，问题管理，代码审查，监控以及持续集成和部署。它使开发人员能够构建，部署和运行他们的应用程序。&lt;/p&gt;

&lt;p&gt;有三种不同版本的GitLab可用，社区版（CE），企业版（EE）和GitLab托管版本。&lt;/p&gt;

&lt;p&gt;如果你想将项目从&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;移开，那么你一定要试试GitLab。它可以从不同的来源导入项目和问题，包括GitHub，这使得迁移过程无忧无虑。GitLab界面设计精良，干净，直观，并且在用户体验和功能方面与GitHub相近。&lt;/p&gt;

&lt;p&gt;根据您的要求和偏好，有几种方法可以安装GitLab。本教程介绍了使用Omnibus软件包在CentOS 7系统上安装和配置GitLab（CE）所需的步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何重命名本地和远程Git分支</title>
      <link>/linux/how-to-rename-local-and-remote-git-branch/</link>
      <pubDate>Thu, 09 May 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-rename-local-and-remote-git-branch/</guid>
      <description>&lt;p&gt;您正在与一组人合作开发项目，并且已经为git分支定义了命名约定。您创建了一个新分支，将更改推送到远程存储库并意识到您的分支名称不正确。&lt;/p&gt;

&lt;p&gt;幸运的是，Git允许您使用该&lt;code&gt;-m&lt;/code&gt;选项非常轻松地重命名分支。&lt;/p&gt;

&lt;p&gt;本指南将解释如何重命名本地和远程Git分支。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装和配置 Gogs</title>
      <link>/linux/how-to-install-and-configure-gogs-on-ubuntu-18-04/</link>
      <pubDate>Fri, 26 Apr 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-and-configure-gogs-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;Gogs 是一个用 Go 编写的自托管开源 git 服务器。它包括存储库文件编辑器，项目问题跟踪，并且内置维基。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; 是一个轻量级应用程序，内存占用空间更小，可以安装在低功耗系统上。如果您正在寻找 Gitlab 的替代品，而且您不需要 &lt;a href=&#34;/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/&#34;&gt;Gitlab&lt;/a&gt; 提供的所有功能，那么您一定要尝试 Gogs 。&lt;/p&gt;

&lt;p&gt;本教程介绍了在 Ubuntu 18.04 上安装和配置 Gogs 的步骤。相同的说明适用于 Ubuntu 16.04 和任何其他基于 Ubuntu 的发行版。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Debian 9 上安装Git</title>
      <link>/linux/how-to-install-git-on-debian-9/</link>
      <pubDate>Tue, 23 Apr 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-debian-9/</guid>
      <description>&lt;p&gt;本教程将向您展示如何在 Debian 9 上安装和配置 Git 。&lt;/p&gt;

&lt;p&gt;Git 是许多开源和商业项目使用的世界上最流行的分布式版本控制系统。它允许您跟踪代码更改，恢复到以前的阶段，创建分支以及与您的开发人员协作。&lt;/p&gt;

&lt;p&gt;Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;本教程在 Debian 9 上进行了测试，但它也适用于任何以前的 Debian 版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 CentOS 7 上安装 Git</title>
      <link>/linux/how-to-install-git-on-centos-7/</link>
      <pubDate>Fri, 05 Apr 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-centos-7/</guid>
      <description>&lt;p&gt;本教程将引导您在 CentOS 7 安装 Git 并完成基本的配置。&lt;/p&gt;

&lt;p&gt;Git 是最受欢迎的版本控制系统，已被数十万个项目使用。 Git 允许您跟踪代码更改，恢复到以前的阶段，在多个分支上同时工作并与您的开发人员协作。 Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;在撰写本文时，默认的 CentOS 7 存储库中可用的 Git 版本 &lt;code&gt;1.8.3&lt;/code&gt; 已经过时了。&lt;/p&gt;

&lt;p&gt;安装最新版 Git (&lt;code&gt;v2.18&lt;/code&gt;) 的最简单方法是使用 &lt;a href=&#34;http://opensource.wandisco.com/&#34;&gt;Wandisco&lt;/a&gt; 存储库中的 yum 软件包管理工具进行安装。&lt;/p&gt;

&lt;p&gt;另一种选择是从源代码编译 Git ，这将允许您安装最新的 Git 版本并自定义构建选项，但您将无法通过 &lt;code&gt;yum&lt;/code&gt; 包管理器维护 Git 安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装 Git</title>
      <link>/linux/how-to-install-git-on-ubuntu-18-04/</link>
      <pubDate>Sat, 30 Mar 2019 05:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-git-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;Git 是分布式版本控制系统的事实标准，现在被大多数开发人员使用。它允许您跟踪代码更改，恢复到以前的阶段，创建分支以及与您的开发人员协作。&lt;/p&gt;

&lt;p&gt;Git 最初是由 Linux 内核的创建者 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus_Torvalds&#34;&gt;Linus Torvalds&lt;/a&gt; 开发的。&lt;/p&gt;

&lt;p&gt;本教程将指导您完成在 Ubuntu 18.04 上安装 Git 所需的步骤。相同的说明适用于 Ubuntu 16.04 和任何其他基于 Ubuntu 的发行版，包括 Kubuntu ， Linux Mint 和 Elementary OS 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Ubuntu 18.04 上安装和配置 GitLab</title>
      <link>/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/</link>
      <pubDate>Tue, 19 Mar 2019 06:00:00 +0800</pubDate>
      
      <guid>/linux/how-to-install-and-configure-gitlab-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;GitLab 是一个基于 Web 的开源 &lt;!--link:how-to-install-git-on-ubuntu-18-04--&gt;Git&lt;!--link--&gt; 软件仓库管理器，用 &lt;!--link:how-to-install-ruby-on-ubuntu-18-04--&gt;Ruby&lt;!--link--&gt; 编写，包括 wiki，问题管理，代码审查，监控以及持续集成和部署。它使开发人员能够创建，审查和部署他们的项目。&lt;/p&gt;

&lt;p&gt;有三种不同版本的 GitLab 可用，社区版 (CE) ，企业版 (EE) 和 GitLab 托管版本。&lt;/p&gt;

&lt;p&gt;如果你想远离 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; ， &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; 是首选。它可以从不同的来源导入项目和问题，包括 GitHub ，这使得迁移过程无忧无虑。 GitLab 界面设计精良，干净，直观，并且在用户体验和功能方面与 GitHub 相近。&lt;/p&gt;

&lt;p&gt;根据所需的用例，有几种方法可以安装 GitLab 。本教程介绍了使用 Omnibus 软件包在 Ubuntu 18.04 系统上安装和配置 GitLab  (CE) 所需的步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用github作为maven仓库</title>
      <link>/post/github-maven-repository/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/github-maven-repository/</guid>
      <description>&lt;p&gt;本文介绍的这种使用 github 作为 maven 仓库的思路主要为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github的项目上创建mvn-repo分支，使用mvn-repo分支作为maven仓库&lt;/li&gt;
&lt;li&gt;配 置 pom.xml 使用 target/mvn-repo 作为本地部署的临时maven仓库&lt;/li&gt;
&lt;li&gt;部署时使用 github site-maven-plugin 将本地的maven仓库 push 到 github 的项目的分支 mvn-repo 上去&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Git对于SVN的优势</title>
      <link>/post/advantage-of-git-to-svn/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/advantage-of-git-to-svn/</guid>
      <description>Git是一个相当出色的版本控制工具，相对于SVN，Git有很多优势。 1、Git是分布式的 Git是分布式的，没有客户端/服务端的概念，每个仓库</description>
    </item>
    
    <item>
      <title>Git 使用汇总</title>
      <link>/post/git-usage-notes/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/git-usage-notes/</guid>
      <description>git 基本操作命令 git init 用于初始化一个git仓库 git config user.name &amp;ldquo;buzheng&amp;rdquo; 配置用户名 git config user.email &amp;ldquo;zany@buzheng.org&amp;rdquo; git remote add origin git@xxxx.com:xxxxx_project/xxxx.git 添加远程服务端源 git fetch 获取代码 git pull 获取代码，并进行了merge操</description>
    </item>
    
  </channel>
</rss>