<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on 不争笔记</title>
    <link>/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on 不争笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正则匹配连续数字</title>
      <link>/post/regex-match-consequent-numbers/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/regex-match-consequent-numbers/</guid>
      <description>&lt;p&gt;今天有个网友问了匹配连续数字的正则，刚好无事，就帮忙写了一下，算是当作温习一下吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我所知道的正则表达式（3）- 零宽断言</title>
      <link>/post/regex-zero-width-assertion/</link>
      <pubDate>Wed, 16 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/regex-zero-width-assertion/</guid>
      <description>&lt;p&gt;正则表达式里面比较高级的应用就属于零宽断言了。那么什么是零宽断言呢？拆分法从字面上分析一下，零宽，即宽度为0，意味者不会返回匹配的字符，以为匹配的是当前字符的位置。断言，就是预言、假设，意味着从此处假设存在什么情况。那么零宽断言的意思就是假定从此位置开始满足某种情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我所知道的正则表达式（2）- 贪婪模式与懒惰模式</title>
      <link>/post/regex-greedy-mode/</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/regex-greedy-mode/</guid>
      <description>了解了正则表达式基础知识已经能够能应付大多数情况，像字符串匹配、正则替换、校验等；但是再使用的过程中你可能发现一个问题，就是当使用重复元字符匹配数量时，总是会尽可能长的去匹配，而有时这恰恰不是你想要的。看下面的例子：
&amp;lt;a href=”http://www.google.com”&amp;gt;谷歌&amp;lt;/a&amp;gt;&amp;lt;a href=”http://www.baidu.com”&amp;gt;百度&amp;lt;/a&amp;gt;  你希望匹配出每个链接的html内容。如果你用 &amp;lt;a (.*)&amp;lt;/a&amp;gt;会首先匹配到整个字符串，而不是你希望的&amp;lt;a href=”http://www.google.com”&amp;gt;谷歌&amp;lt;/a&amp;gt;和&amp;lt;a href=”http://www.baidu.com”&amp;gt;百度&amp;lt;/a&amp;gt;。
为什么会出现这种情况呢？这就是正则表达式的贪婪模式。当出现重复数量的时候，会尽可能的多匹配。上述的正则表达式中 . 表示任意字符，* 代表可以重复出现任意个，根据正则表达式的贪婪个性，不匹配到最后才怪呢。就像人一样，有贪婪就有懒惰，一个?就可以让正则立刻改变本性，这时的正则就表现懒惰模式的本性了。
修改后的正则表达式为：&amp;lt;a (.*?)&amp;lt;/a&amp;gt;，这时就可以匹配出每个链接的html了。
测试用例为：
import java.util.regex.Matcher; import java.util.regex.Pattern; public class Test { public static void main(String[] args) throws Exception { String value = &amp;quot;&amp;lt;a href=&amp;quot;http://www.google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;&amp;lt;a href=&amp;quot;http://www.baidu.com&amp;quot;&amp;gt;百度&amp;lt;/a&amp;gt;&amp;quot;; System.out.println(&amp;quot;贪婪模式：&amp;quot;); Pattern pattern = Pattern.compile(&amp;quot;&amp;lt;a (.*)&amp;lt;/a&amp;gt;&amp;quot;); Matcher matcher = pattern.matcher(value); while (matcher.find()) { System.out.println(matcher.group(0)); } System.out.println(&amp;quot;贪婪模式：&amp;quot;); pattern = Pattern.compile(&amp;quot;&amp;lt;a (.*?)&amp;lt;/a&amp;gt;&amp;quot;); matcher = pattern.matcher(value); while (matcher.find()) { System.out.println(matcher.group(0)); } } }  最后总结一下数量元字符懒惰模式的常用写法(其实就是多了一个?</description>
    </item>
    
    <item>
      <title>我所知道的正则表达式（1）- 基础知识</title>
      <link>/post/regex-basic/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/regex-basic/</guid>
      <description>&lt;p&gt;正则表达式是处理文本时的有力工具，能够按照一定的模式或规则去匹配具有一定格式的文本，并可以完成分组、替换等复杂功能。作为一程序员，正则作为必备武器，能给我们处理文带来极大的便利。经常用到的正则的场景如：javascript验证输入格式（密码、电话、email等）、网页爬虫从网页中的解析出需要的内容，替换相同模式的文本内容等。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>